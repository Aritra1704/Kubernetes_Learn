apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
#  If not to be created in default namespace, define namespace
  namespace: dev
  labels:
    app: myapp
    function: Front-end
  annotations:
    buildVersion: 1.34
spec:
#  If default service account not to be used
  serviceAccountName: dashboard-sa
#  To not allow a mount a service account automatically
  automountServiceAccountToken: false
#  Executes these containers first and these need to finish to start the actual containers
  initContainers:
    - name: init-myservice
      image: busybox
  containers:
    - name: nginx-container
      image: nginx
      ports:
        - containerPort: 8080
#     Setup readiness probe to verify if pod is actually ready
      readinessProbe:
#        For http use this backend application
        httpGet:
          path: /api/ready
          port: 8080
#        For tcp use tcpSocket Eg: db server
        tcpSocket:
          port: 3306
#       Custom script
        exec:
          command:
            - cat
            - /app/is_ready
#       To setup some initial delay in verification
        initialDelaySeconds: 10
#       To setup delay in period to verify if pod is up
        periodSeconds: 5
#       If default delay of 3 needs to be updated
        failureThreshold: 8
#     Setup liveness probe to verify if pod is actually ready
      livenessProbe:
#        For http use this backend application
        httpGet:
          path: /api/healthy
          port: 8080
#        For tcp use tcpSocket Eg: db server
        tcpSocket:
          port: 3306
#       Custom script
        exec:
          command:
            - cat
            - /app/is_healthy
#       To setup some initial delay in verification
        initialDelaySeconds: 10
#       To setup delay in period to verify if pod is working
        periodSeconds: 5
#       If default delay of 3 needs to be updated
        failureThreshold: 8
#     Setup volume mount paths in the node
      volumeMounts:
        - mountPath: /opt
          name: data-volume
# Setup data volumes
  volumes:
    - name: data-volume
      hostPath:
        path: /data
        type: Directory
# Setup nodeaffinity
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: size
                operator: In
                values:
                  - Large
                  - Medium
# Setup nodeselector
  nodeSelectors:
    size: Large
#   Setting up toleration
  tolerations:
    - key: app
      operator: Equal
      value: blue
      effect: NoSchedule
#     If non default resources are required
#      resources:
#        requests:
#          memory: "1Gi"
#          cpu: 1
#        limits:
#          memory: "2Gi"
#          cpu: 2
# To declare env variable
#      env:
#        - name: APP_COLOR
#          value: pink
# To declare env from configMaps
#      envFrom:
#        - configMapRef:
#            name: app-config
# Single env
#      env:
#        - name: APP_COLOR
#          valueFrom:
#            configMapKeyRef:
#              name: app-config
#              key: APP_COLOR
# Volume
#      volumes:
#        - name: app-config-volume
#          configMap:
#            name: app-config

# Secret
#      envFrom:
#        - secretRef:
#            name: app-secret
# Single env from Secret
#      env:
#        - name: DB_PASSWORD
#          valueFrom:
#            secretKeyRef:
#              name: app-secret
#              key: DB_PASSWORD
# Secret Volume
#      volumes:
#        - name: app-secret-volume
#          secret:
#            secretName: app-secret